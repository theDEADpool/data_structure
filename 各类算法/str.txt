char* Mystrcpy(char* pDest, const char* pSrc)
{
    assert(pSrc);
    assert(pDest);

    char *ret = pDest;
    while(*pSrc != '\0') {
        *pDest = *pSrc;
        pSrc++;
        pDest++;
    }
    *pDest = '\0';
    
    return ret;
}

char* Mystrcat(char* pDest, const char* pSrc)
{
    assert(pSrc);
    assert(pDest);

    char *ret = pDest;
    while (*pDest != '\0') {
		pDest++;
	}
    while (*pSrc != '\0') {
        *pDest = *pSrc;
        pDest++;
        pSrc++;
    }
    *pDest = '\0';

    return ret;
}

int Mystrcmp(const char* pLeft, const char* pRight)
{
    assert(pLeft);
    assert(pRight);
    
    while (*pLeft != '\0' && *pRight != '\0') {
        if (*pLeft > *pRight) {
            return 1;
        } else if (*pLeft < *pRight) {
            return -1;
        }
        *pLeft++;
        *pRight++;
    }
    
    if (*pLeft > *pRight) {
        return 1;
    } else if (*pLeft < *pRight) {
        return -1;
    }

    return 0;
}

const char* Mystrstr(const char* pLeft, const char* pRight)
{
    assert(pLeft);
    assert(pRight);
    if (*pRight == '\0') { return NULL; }

    while (*pLeft != '\0') {
        const char* start1 = pLeft;
        const char* start2 = pRight;
        while (*start1 != '\0' && *start2 != '\0' && *start1 == *start2) {
            start1++;
            start2++;
        }
        
        if (*start2 == '\0') { return pRight; }
        pLeft++;
    }
    
    return NULL;
}

void* Mymemcpy(void* pDest, void *pSrc, unsigned n)
{
    assert(pSrc);
    assert(pDest);
    void *ret = pDest;

    while(n > 0) {
        *(char*)pDest = *(char*)pSrc;
        pDest = (char*)pDest + 1;
        pSrc = (char*)pSrc + 1;
        n--;
    }

    return ret;
}

void* Mymemmove(void* pDest, const void* pSrc, int n)
{
    assert(pDest);
    assert(pSrc);
    
    void* ret = pDest;
    char* dest = (char*)pDest;
    char* src = (char*)pSrc;
    if (src > dest) {
        while (n > 0) {
            *dest = *src;
            dest++;
            src++;
            n--;
        }
    } else {
        dest += n - 1;
		src += n - 1;
		while (n > 0) {
			*dest = *src;
			dest--;
			src--;
			n--;
		}
    }
    
    return ret;
}
